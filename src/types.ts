/**
 * This is a TypeScript file that defines custom types and object 
 * generation related variables.
 *
 * @fileOverview
 * @module types
 *
 * @description
 * Handles custom type definition and object generation related variables.
 *
 * @author
 * Nisha Shaline Kannapper [31121993]
 *
 * @version
 * Assignment submission version
 */

import "./style.css";

/** User input */
 // down, left, right, up
 // rotate left, rotate right, pause, restart
export type Key 
    = "KeyS" | "KeyA" | "KeyD" | "KeyW" |
        "KeyQ" | "KeyE" | "KeyR" | "KeyP" | "KeyZ" ;

export type Event = "keydown" | "keyup" | "keypress" ;

/**Instructions to be generated by Observables */
export type Instruction
    = "tick0" | "tick1" | "tick2" | "tick3" | "tick4" |
        "down" | "left" | "right" | "up" |
        "rotate-left" | "rotate-right" |
        "pause" | "restart" | "calm-mode";


/** Game types */

export type State = Readonly<{
    gameStart: boolean,
    gameEnd: boolean,
    roundStart: boolean,
    frozen: boolean,
    pause: boolean,
    zenMode: boolean

    board: Board,
    difficulty: difficultyScore,
    score: number,
    highscore: number,
    pieceCount: number,

    currentTet: Tet,
    nextTet: Tet,
}>

export type Block = Readonly<{
    x: number,
    y: number,
    cssStyle: string,
    id: number
}>

// center and mid for rotation
// top bot left right for collision
export type Tet = Readonly<{
    type: TetType
    topRow: number,
    botRow: number,
    midRow: number
    leftCol: number,
    rightCol: number
    centCol: number,
    rotation: number,
    blocks: Block[]
}>

export type Board = Readonly<{
    grid: Block[][] // rows/y, columns/x

}>

/** Game related */

export enum TetType {
    I = "fill: #7f56cc",
    J = "fill: #d884f0",
    L = "fill: #d96883",
    O = "fill: #508cb5",
    S = "fill: #e094b1",
    T = "fill: #928bd9",
    Z = "fill: #9e3195",
}

export const tetArray: TetType[] = [TetType.I, TetType.O, TetType.J, 
    TetType.L, TetType.S, 
    TetType.T, TetType.Z]

export enum difficultyScore {
    d_1 = 0,
    d_2 = 2,
    d_3 = 4,
    d_4 = 6,

}




/** Custom type to map tetromino rotation in SEGA rotation system, 
 * rotation is calculated around midRow and centCol attibutes */
export type TetBlueprint = Readonly<{
    1: Tet,
    2: Tet,
    3: Tet,
    4: Tet,
}>

/** Blueprint for rotation of O tetromino */
export const tetO: TetBlueprint = {
    1: {type: TetType.O, rotation: 1, 
        midRow: 0, centCol: 0, 
        topRow: 0, botRow: 1, 
        leftCol: 0, rightCol: 1,
        blocks:[
        {y: 0, x: 0, cssStyle: TetType.O, id: 0},
        {y: 0, x: 1, cssStyle: TetType.O, id: 1},
        {y: 1, x: 0, cssStyle: TetType.O, id: 2},
        {y: 1, x: 1, cssStyle: TetType.O, id: 3}
    ]},

    2: {type: TetType.O, rotation: 1, 
        midRow: 0, centCol: 0, 
        topRow: 0, botRow: 1, 
        leftCol: 0, rightCol: 1,
        blocks:[
        {y: 0, x: 0, cssStyle: TetType.O, id: 0},
        {y: 0, x: 1, cssStyle: TetType.O, id: 1},
        {y: 1, x: 0, cssStyle: TetType.O, id: 2},
        {y: 1, x: 1, cssStyle: TetType.O, id: 3}
    ]},

    3: {type: TetType.O, rotation: 1, 
        midRow: 0, centCol: 0, 
        topRow: 0, botRow: 1, 
        leftCol: 0, rightCol: 1,
        blocks:[
        {y: 0, x: 0, cssStyle: TetType.O, id: 0},
        {y: 0, x: 1, cssStyle: TetType.O, id: 1},
        {y: 1, x: 0, cssStyle: TetType.O, id: 2},
        {y: 1, x: 1, cssStyle: TetType.O, id: 3}
    ]},

    4: {type: TetType.O, rotation: 1, 
        midRow: 0, centCol: 0, 
        topRow: 0, botRow: 1, 
        leftCol: 0, rightCol: 1,
        blocks:[
        {y: 0, x: 0, cssStyle: TetType.O, id: 0},
        {y: 0, x: 1, cssStyle: TetType.O, id: 1},
        {y: 1, x: 0, cssStyle: TetType.O, id: 2},
        {y: 1, x: 1, cssStyle: TetType.O, id: 3}
    ]},
}

/** Blueprint for rotation of I tetromino */
export const tetI: TetBlueprint= {
    // flat I
    1: {type: TetType.I, rotation: 1,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: 0, botRow: 0, 
        leftCol: -1, rightCol: 2, 

        blocks:[
        {y: 0, x: -1, cssStyle: TetType.I, id: 0},
        {y: 0, x: 0, cssStyle: TetType.I, id: 1},
        {y: 0, x: 1, cssStyle: TetType.I, id: 2},
        {y: 0, x: 2, cssStyle: TetType.I, id: 3}
    ]},

    // standing I
    2: {type: TetType.I, rotation: 2, 
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: -1, botRow: 2, 
        leftCol: 1, rightCol: 1, 

        blocks:[
        {y: -1, x: 1, cssStyle: TetType.I, id: 0},
        {y: 0, x: 1, cssStyle: TetType.I, id: 1},
        {y: 1, x: 1, cssStyle: TetType.I, id: 2},
        {y: 2, x: 1, cssStyle: TetType.I, id: 3}
    ]},

    // flat I
    3: {type: TetType.I, rotation: 1,
        midRow: 0, centCol: -1, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: 0, botRow: 0, 
        leftCol: -1, rightCol: 2, 

        blocks:[
        {y: 0, x: -1, cssStyle: TetType.I, id: 0},
        {y: 0, x: 0, cssStyle: TetType.I, id: 1},
        {y: 0, x: 1, cssStyle: TetType.I, id: 2},
        {y: 0, x: 2, cssStyle: TetType.I, id: 3}
    ]},

    // standing I
    4: {type: TetType.I, rotation: 2, 
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: -1, botRow: 2, 
        leftCol: 1, rightCol: 1, 

        blocks:[
        {y: -1, x: 1, cssStyle: TetType.I, id: 0},
        {y: 0, x: 1, cssStyle: TetType.I, id: 1},
        {y: 1, x: 1, cssStyle: TetType.I, id: 2},
        {y: 2, x: 1, cssStyle: TetType.I, id: 3}
    ]},
}


/** Blueprint for rotation of J tetromino */
export const tetJ: TetBlueprint= {
    1: {type: TetType.J, rotation: 1,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: 0, botRow: 1, 
        leftCol: -1, rightCol: 1, 

        blocks:[
        {y: 0, x: -1, cssStyle: TetType.J, id: 0},
        {y: 0, x: 0, cssStyle: TetType.J, id: 1},
        {y: 0, x: 1, cssStyle: TetType.J, id: 2},
        {y: 1, x: 1, cssStyle: TetType.J, id: 3}
    ]},

    2: {type: TetType.J, rotation: 2,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: -1, botRow: 1, 
        leftCol: -1, rightCol: 0, 

        blocks:[
        {y: -1, x: 0, cssStyle: TetType.J, id: 0},
        {y: 0, x: 0, cssStyle: TetType.J, id: 1},
        {y: 1, x: 0, cssStyle: TetType.J, id: 2},
        {y: 1, x: -1, cssStyle: TetType.J, id: 3}
    ]},

    3: {type: TetType.J, rotation: 3,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: 0, botRow: 1, 
        leftCol: -1, rightCol: 1, 

        blocks:[
        {y: 0, x: -1, cssStyle: TetType.J, id: 0},
        {y: 1, x: -1, cssStyle: TetType.J, id: 1},
        {y: 1, x: 0, cssStyle: TetType.J, id: 2},
        {y: 1, x: 1, cssStyle: TetType.J, id: 3}
    ]},

    4: {type: TetType.J, rotation: 4,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: -1, botRow: 1, 
        leftCol: 0, rightCol: 1, 

        blocks:[
        {y: -1, x: 0, cssStyle: TetType.J, id: 0},
        {y: 0, x: 0, cssStyle: TetType.J, id: 1},
        {y: 1, x: 0, cssStyle: TetType.J, id: 2},
        {y: -1, x: 1, cssStyle: TetType.J, id: 3}
    ]},
}


/** Blueprint for rotation of L tetromino */
export const tetL: TetBlueprint= {
    1: {type: TetType.L, rotation: 1,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: 0, botRow: 1, 
        leftCol: -1, rightCol: 1, 

        blocks:[
        {y: 0, x: -1, cssStyle: TetType.L, id: 0},
        {y: 0, x: 0, cssStyle: TetType.L, id: 1},
        {y: 0, x: 1, cssStyle: TetType.L, id: 2},
        {y: 1, x: -1, cssStyle: TetType.L, id: 3}
    ]},

    2: {type: TetType.L, rotation: 2,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: -1, botRow: 1, 
        leftCol: -1, rightCol: 0, 

        blocks:[
        {y: -1, x: 0, cssStyle: TetType.L, id: 0},
        {y: 0, x: 0, cssStyle: TetType.L, id: 1},
        {y: 1, x: 0, cssStyle: TetType.L, id: 2},
        {y: -1, x: -1, cssStyle: TetType.L, id: 3}
    ]},

    3: {type: TetType.L, rotation: 3,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: 0, botRow: 1, 
        leftCol: -1, rightCol: 1, 

        blocks:[
        {y: 0, x: 1, cssStyle: TetType.L, id: 0},
        {y: 1, x: -1, cssStyle: TetType.L, id: 1},
        {y: 1, x: 0, cssStyle: TetType.L, id: 2},
        {y: 1, x: 1, cssStyle: TetType.L, id: 3}
    ]},

    4: {type: TetType.L, rotation: 4,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: -1, botRow: 1, 
        leftCol: 0, rightCol: 1, 

        blocks:[
        {y: -1, x: 0, cssStyle: TetType.L, id: 0},
        {y: 0, x: 0, cssStyle: TetType.L, id: 1},
        {y: 1, x: 0, cssStyle: TetType.L, id: 2},
        {y: 1, x: 1, cssStyle: TetType.L, id: 3}
    ]},
}

/** Blueprint for rotation of S tetromino */
export const tetS: TetBlueprint= {
    1: {type: TetType.S, rotation: 1,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: 0, botRow: 1, 
        leftCol: -1, rightCol: 1, 

        blocks:[
        {y: 0, x: 0, cssStyle: TetType.S, id: 0},
        {y: 0, x: 1, cssStyle: TetType.S, id: 1},
        {y: 1, x: 0, cssStyle: TetType.S, id: 2},
        {y: 1, x: -1, cssStyle: TetType.S, id: 3}
    ]},

    2: {type: TetType.S, rotation: 2,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: -1, botRow: 1, 
        leftCol: -1, rightCol: 0, 

        blocks:[
        {y: -1, x: -1, cssStyle: TetType.S, id: 0},
        {y: 0, x: -1, cssStyle: TetType.S, id: 1},
        {y: 0, x: 0, cssStyle: TetType.S, id: 2},
        {y: 1, x: 0, cssStyle: TetType.S, id: 3}
    ]},

    3: {type: TetType.S, rotation: 1,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: 0, botRow: 1, 
        leftCol: -1, rightCol: 1, 

        blocks:[
        {y: 0, x: 0, cssStyle: TetType.S, id: 0},
        {y: 0, x: 1, cssStyle: TetType.S, id: 1},
        {y: 1, x: 0, cssStyle: TetType.S, id: 2},
        {y: 1, x: -1, cssStyle: TetType.S, id: 3}
    ]},

    4: {type: TetType.S, rotation: 2,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: -1, botRow: 1, 
        leftCol: -1, rightCol: 0, 

        blocks:[
        {y: -1, x: -1, cssStyle: TetType.S, id: 0},
        {y: 0, x: -1, cssStyle: TetType.S, id: 1},
        {y: 0, x: 0, cssStyle: TetType.S, id: 2},
        {y: 1, x: 0, cssStyle: TetType.S, id: 3}
    ]},
}

/** Blueprint for rotation of Z tetromino */
export const tetZ: TetBlueprint= {
    1: {type: TetType.Z, rotation: 1,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: 0, botRow: 1, 
        leftCol: -1, rightCol: 1, 

        blocks:[
        {y: 0, x: -1, cssStyle: TetType.Z, id: 0},
        {y: 0, x: 0, cssStyle: TetType.Z, id: 1},
        {y: 1, x: 0, cssStyle: TetType.Z, id: 2},
        {y: 1, x: 1, cssStyle: TetType.Z, id: 3}
    ]},

    2: {type: TetType.Z, rotation: 2,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: -1, botRow: 1, 
        leftCol: 0, rightCol: 1, 

        blocks:[
        {y: -1, x: 1, cssStyle: TetType.Z, id: 0},
        {y: 0, x: 0, cssStyle: TetType.Z, id: 1},
        {y: 0, x: 1, cssStyle: TetType.Z, id: 2},
        {y: 1, x: 0, cssStyle: TetType.Z, id: 3}
    ]},

    3: {type: TetType.Z, rotation: 1,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: 0, botRow: 1, 
        leftCol: -1, rightCol: 1, 

        blocks:[
        {y: 0, x: -1, cssStyle: TetType.Z, id: 0},
        {y: 0, x: 0, cssStyle: TetType.Z, id: 1},
        {y: 1, x: 0, cssStyle: TetType.Z, id: 2},
        {y: 1, x: 1, cssStyle: TetType.Z, id: 3}
    ]},

    4: {type: TetType.Z, rotation: 2,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: -1, botRow: 1, 
        leftCol: 0, rightCol: 1, 

        blocks:[
        {y: -1, x: 1, cssStyle: TetType.Z, id: 0},
        {y: 0, x: 0, cssStyle: TetType.Z, id: 1},
        {y: 0, x: 1, cssStyle: TetType.Z, id: 2},
        {y: 1, x: 0, cssStyle: TetType.Z, id: 3}
    ]},
}

/** Blueprint for rotation of T tetromino */
export const tetT: TetBlueprint= {
    1: {type: TetType.T, rotation: 1,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: 0, botRow: 1, 
        leftCol: -1, rightCol: 1, 

        blocks:[
        {y: 0, x: -1, cssStyle: TetType.T, id: 0},
        {y: 0, x: 0, cssStyle: TetType.T, id: 1},
        {y: 0, x: 1, cssStyle: TetType.T, id: 2},
        {y: 1, x: 0, cssStyle: TetType.T, id: 3}
    ]},

    2: {type: TetType.T, rotation: 2,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: -1, botRow: 1, 
        leftCol: -1, rightCol: 0, 

        blocks:[
        {y: -1, x: 0, cssStyle: TetType.T, id: 0},
        {y: 0, x: -1, cssStyle: TetType.T, id: 1},
        {y: 0, x: 0, cssStyle: TetType.T, id: 2},
        {y: 1, x: 0, cssStyle: TetType.T, id: 3}
    ]},

    3: {type: TetType.T, rotation: 3,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: 0, botRow: 1, 
        leftCol: -1, rightCol: 1, 

        blocks:[
        {y: 0, x: 0, cssStyle: TetType.T, id: 0},
        {y: 1, x: 0, cssStyle: TetType.T, id: 1},
        {y: 1, x: 1, cssStyle: TetType.T, id: 2},
        {y: 1, x: -1, cssStyle: TetType.T, id: 3}
    ]},

    4: {type: TetType.T, rotation: 4,
        midRow: 0, centCol: 0, // passed in from prev tet/generate method

        // relative to mid and cent
        topRow: -1, botRow: 1, 
        leftCol: 0, rightCol: 1, 

        blocks:[
        {y: -1, x: 0, cssStyle: TetType.T, id: 0},
        {y: 0, x: 0, cssStyle: TetType.T, id: 1},
        {y: 0, x: 1, cssStyle: TetType.T, id: 2},
        {y: 1, x: 0, cssStyle: TetType.T, id: 3}
    ]},
}